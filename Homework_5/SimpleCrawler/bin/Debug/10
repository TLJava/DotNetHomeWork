<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta name="description" content="前言 上篇文章我们一起对jvm的内存模型有了比较清晰的认识，小伙伴们可以参考JVM内存模型不再是秘密这篇文章做一个复习。 本篇文章我们将针对jvm堆内存的分代模型做一个详细的解析，和大家一起轻松理解j" />
    <meta property="og:description" content="前言 上篇文章我们一起对jvm的内存模型有了比较清晰的认识，小伙伴们可以参考JVM内存模型不再是秘密这篇文章做一个复习。 本篇文章我们将针对jvm堆内存的分代模型做一个详细的解析，和大家一起轻松理解j" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>轻松理解JVM的分代模型 - H.U.C-王子 - 博客园</title>
    <link id="favicon" rel="shortcut icon" href="//common.cnblogs.com/favicon.svg" type="image/svg+xml" />
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=nAUr7f6tsKT5WPUjkcyfbi-3yZncJHl3AjtQtIAJRgM" />
    <link id="MainCss" rel="stylesheet" href="/skins/mountainink/bundle-mountainink.min.css?v=Is1zLC-hKGkeQp8OEIixYBJw420AOaLZa83wvOuLhBY" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/mountainink/bundle-mountainink-mobile.min.css?v=arJ4BmwdBcUZrSduKjIvQKPiliQ99OBUW7yasPqJtdY" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/lm970585581/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/lm970585581/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/lm970585581/wlwmanifest.xml" />
    <script>
        var currentBlogId = 346152;
        var currentBlogApp = 'lm970585581';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var isBlogOwner = false;
        var skinName = 'MountainInk';
        var visitorUserId = '';
    </script>
        <script>
            var currentPostDateAdded = '2020-10-10 04:30';
        </script>
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=quLP6V96NCUwrp9e9p4Tc3ZzspjwpbJyGVOAQHoms5M"></script>
    
    
    
</head>
<body>
    <a name="top"></a>
    <div id="top_nav" class="navbar">
        <nav id="nav_main" class="navbar-main">
            <ul id="nav_left" class="navbar-list navbar-left">
                <li class="navbar-branding">
                    <a href="https://www.cnblogs.com/" title="开发者的网上家园"><img src="/images/logo.svg?v=R9M0WmLAIPVydmdzE2keuvnjl-bPR7_35oHqtiBzGsM" alt="博客园Logo" /></a>
                </li>
                <li><a href="/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-sitehome')">首页</a></li>
                <li><a href="https://news.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-news')">新闻</a></li>
                <li><a href="https://q.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-q')">博问</a></li>
                <li><a id="nav_brandzone" href="https://brands.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-brands')">专区</a></li>
                <li><a href="https://ing.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-ing')">闪存</a></li>
                <li><a href="https://edu.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-edu')">班级</a></li>
            </ul>
            <ul id="nav_right" class="navbar-list navbar-right">
                <li>
                    <form id="zzk_search" class="navbar-search" action="https://zzk.cnblogs.com/s" method="get">
                        <input name="w" id="zzk_search_input" placeholder="代码改变世界" type="text" tabindex="3" />
                        <button type="submit" id="zzk_search_button">
                            <img src="/images/aggsite/search.svg" alt="搜索" />
                        </button>
                    </form>
                </li>
                <li id="navbar_login_status" class="navbar-list">
                    <a id="navblog-myblog-icon" class="navbar-user-info navbar-blog" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx" alt="我的博客" title="我的博客">
                        <img id="myblog_icon" class="navbar-icon" src="/images/aggsite/myblog.svg" alt="我的博客" />
                    </a>
                    <a class="navbar-user-info navbar-message navbar-icon-wrapper" href="https://msg.cnblogs.com/" alt="短消息" title="短消息">
                        <img id="msg_icon" class="navbar-icon" src="/images/aggsite/message.svg?v=oS4PkibyMjZ9rGD5XAcLt99uW_s76Javy2up4dbnZNY" alt="短消息" />
                        <span id="msg_count" style="display: none"></span>
                    </a>
                    <div id="user_info" class="navbar-user-info dropdown">
                        <a class="dropdown-button" href="https://home.cnblogs.com/">
                            <img id="user_icon" class="navbar-avatar" src="/images/aggsite/avatar-default.svg" alt="用户头像" />
                        </a>
                        <div class="dropdown-menu">
                            <a id="navblog-myblog-text" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx">我的博客</a>
                            <a href="https://home.cnblogs.com/">我的园子</a>
                            <a href="https://account.cnblogs.com/settings/account">账号设置</a>
                            <a href="javascript:void(0)" onclick="logout();">退出登录</a>
                        </div>
                    </div>
                    <a class="navbar-anonymous" href="https://account.cnblogs.com/signup/">注册</a>
                    <a class="navbar-anonymous" href="https://account.cnblogs.com/signin/?returnUrl=https://www.cnblogs.com/">登录</a>
                </li>
            </ul>
        </nav>
    </div>

    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/lm970585581/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/lm970585581/">H.U.C-王子</a>
</h1>
<h2>
微信搜索“HUC思梦”关注我吧，关注有惊喜，不定时有免费资源分享！
</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/lm970585581/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/H.U.C-%E7%8E%8B%E5%AD%90">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="javascript:void(0)" data-rss="https://www.cnblogs.com/lm970585581/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
318&nbsp; </span>
<span id="stats_article_count">文章 - 
3&nbsp; </span>
<span id="stats-comment_count">评论 - 
28</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/lm970585581/p/13793407.html">
    <span>轻松理解JVM的分代模型</span>
    


</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body">
    <p>&nbsp;</p>
<h3>前言</h3>
<p>上篇文章我们一起对jvm的内存模型有了比较清晰的认识，小伙伴们可以参考<a href="https://mp.weixin.qq.com/s/5ozxG-uPyP8ATKQOwZXCng" target="_blank">JVM内存模型不再是秘密</a>这篇文章做一个复习。</p>
<p>本篇文章我们将针对jvm堆内存的分代模型做一个详细的解析，和大家一起轻松理解jvm的分代模型。</p>
<p>相信看过其他文章的小伙伴们可能都知道，jvm的分代模型包括：年轻代、老年代、永久代。</p>
<p>那么它们分别代表着什么角色呢？我们先来看一段代码</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> Main {
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> main(String[] args) {
        </span><span style="color: rgba(0, 0, 255, 1)">while</span> (<span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">){
            load();
        }
    }

    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> load(){
        SysUser sysUser </span>= <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> SysUser();
        sysUser.setAvatar(</span>"1"<span style="color: rgba(0, 0, 0, 1)">);
    }

}</span></pre>
</div>
<p>这段代码本身没有什么特殊的含义，主要是理解jvm的运行机制。</p>
<p>首先一旦执行main()方法，就会把main()方法的栈帧压入main线程的虚拟机栈，然后调用load()方法后，又会把load()方法的栈帧压入虚拟机栈。</p>
<p>接着在执行load()方法时，会在java堆内存中创建一个SysUser对象实例，而栈帧中会有sysUser局部变量引用堆内存中的SysUser对象实例。</p>
<p>如下图：</p>
<p><img src="https://img2020.cnblogs.com/blog/1140467/202010/1140467-20201010144645792-1472912081.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;到这里上篇文章都讲解过，相信大家都能看懂。</p>
<p>&nbsp;</p>
<h3>变量的存活时间</h3>
<p>现在我们思考一下会发现，这个SysUser对象实际上属于一个短暂存活的对象，因为在load()方法执行完毕后，load()方法的栈帧就会出栈。</p>
<p>而一旦出栈，就没有了sysUser这个局部变量来引用SysUser这个对象的实例。</p>
<p>所以，其实这个SysUser对象已经没有用了，但是它还在占用着堆内存的空间，那么对于这种没有引用的对象实例jvm是如何处理的呢？</p>
<p>这就要说到jvm的<strong>垃圾回收机制</strong>了，jvm本身是有垃圾回收机制的，它是一个后台线程，会把没有人引用的SysUser对象实例给回收掉，不断的释放内存空间。</p>
<p>所以这个SysUser对象实例是一个存活时间很短的对象，可能在执行load()方法的时候被创建出来，执行之后就被垃圾回收掉了。</p>
<p>而这种对象在我们平时的开发中是很常见的，占绝大多数比例。</p>
<p>&nbsp;</p>
<p>现在我们将上边的代码改造一下：</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> Main {
    </span><span style="color: rgba(0, 0, 255, 1)">private</span> <span style="color: rgba(0, 0, 255, 1)">static</span> SysUser sysUser = <span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> SysUser();
    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> main(String[] args) {
        </span><span style="color: rgba(0, 0, 255, 1)">while</span> (<span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">){
            load();
        }
    }

    </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">static</span> <span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> load(){
        sysUser.setAvatar(</span>"1"<span style="color: rgba(0, 0, 0, 1)">);
    }
}</span></pre>
</div>
<p>其实就是把局部变量sysUser变成了静态变量，这样修改后，sysUser不在作为局部变量保存在栈中，而是和class类文件一起保存在方法区中，这样SysUser对象实例就会一直被这个静态变量引用，所以不会被垃圾回收，一直保存在堆内存中。如下图：</p>
<p><img src="https://img2020.cnblogs.com/blog/1140467/202010/1140467-20201010152707819-610610835.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>分代模型</h3>
<p>接下来我们进入核心内容，就是jvm的分代模型了。</p>
<p>上文中我们发现，根据我们的编码方式的不同，采用不同的方式创建和使用对象，对象的存活时间是不同的。</p>
<p>所以jvm将内存区分为两个区域：<strong>年轻代和老年代</strong>。</p>
<p>年轻代就是我们的第一种局部变量的示例，创建和使用完毕后会被垃圾回收掉。</p>
<p>老年代就是第二种静态变量的示例，创建后需要长期在堆内存中存活。</p>
<p>相信到这里大家就应该理解了什么样的对象是短期存活的对象，什么样的对象是长期存活的对象，那么它们是如何分别存在年轻代和老年代中的呢？为什么要这么区分呢？</p>
<p>其实这与垃圾回收机制是密不可分的。</p>
<p>对于年轻代里的对象，他们的特点是创建后很快就会被回收，而对于老年代里的对象，他们的特点是需要长期存活，所以这两种对象是不能用一种垃圾回收算法进行回收的，所以需要区分成两个。</p>
<p>对于长期存在的静态变量sysUser，其实刚开始的时候也是在年轻代的，<strong>那它是什么时候进入老年代的呢？</strong>我们下文会讲解这个问题。</p>
<p>那永久代又是什么呢？其实永久代就是我们说的jvm的方法区，用于存放一下类信息的，这部分之后的文章涉及到会详解，现在理解到这就可以了。</p>
<p>&nbsp;</p>
<h3>新生代的垃圾回收</h3>
<p>前文我们了解了，当load方法执行完毕出栈后，里面的局部变量sysUser就没了，堆内存中的SysUser对象就没有引用了，所以会被垃圾回收掉。</p>
<p>那么问题来了，<strong>是没有引用后就会立即发生垃圾回收，回收掉没有被引用的对象实例吗？</strong></p>
<p>其实不是这样的，垃圾回收是有触发条件的。</p>
<p>有一个比较常见的场景是这样的，假设我们的代码中创建了大量的对象，导致堆内存中囤积了大量的对象，然后这些对象现在都没有人引用了。</p>
<p>这个时候，如果新生代预先分配的内存空间被占满了，那么我们的代码此时要新创建一个对象的时候，发现新生代空间满了，怎么办？</p>
<p>这个时候就会触发一次新生代的垃圾回收，也称为“<strong>Minor GC</strong>”或"<strong>Young GC</strong>"，它会尝试把新生代中没有人引用的对象给回收掉，释放空间。</p>
<p>下图表达了这一过程：</p>
<p><img src="https://img2020.cnblogs.com/blog/1140467/202010/1140467-20201010160336479-1205767023.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>长期存活的对象什么时候进入老年代</h3>
<p>接下来我们谈论一个话题，静态变量引用的长期存活的对象是什么时候进入老年代的。</p>
<p>上文我们了解到，新生代的对象会经历一次次的垃圾回收，而被静态变量引用的对象因为一直被引用，所以一直不会被回收，所以此时jvm就有了一条规定。</p>
<p>如果新生代中的对象，在经历了15次垃圾回收后，依然坚挺的存活着，那就证明它是个"老年人"了，然后它会被转移到老年代中。</p>
<p>老年代就是存放这些年龄比较大的对象的。</p>
<p>那么老年代中的对象会被垃圾回收吗？</p>
<p>答案是肯定的，因为老年代里的对象随着代码的运行，也是可以不再被任何人引用的，就需要垃圾回收了。</p>
<p>或者说，随着越来越多的对象进入老年代，老年代的内存也会被占满，所以一定是要对老年代进行垃圾回收的。</p>
<p>我们暂时不用考虑具体是怎么回收的，这个内容在之后的文章中我们会有详细的解析。</p>
<p>&nbsp;</p>
<h3>总结</h3>
<p>今天就给大家准备了这么多内容，可能有些小伙伴觉得还没看够，这些内容都比较简单，我已经会了，有没有更深入的东西呢？</p>
<p>别急，学习是循序渐进的事情，王子是想要用最简单的大白话来和小伙伴们一起讨论jvm的原理的，同时也想找一些案例来和大家一起探讨，印象会更深刻。</p>
<p>所以今天小伙伴们了解到这里就可以了，让我们在后续的文章中不见不散，深入讨论些更深层的内容吧。</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>往期文章推荐：</p>
<p><a href="https://mp.weixin.qq.com/s/e_fj3crV8YwcCGy5Jl8W-A" target="_blank">大白话谈JVM的类加载机制</a></p>
<p><a href="https://mp.weixin.qq.com/s/5ozxG-uPyP8ATKQOwZXCng" target="_blank">JVM内存模型不再是秘密</a></p>
<p><img src="https://img2020.cnblogs.com/blog/1140467/202009/1140467-20200901142419527-2040845842.png" alt="" loading="lazy"></p>
<p>&nbsp;</p>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-10-10 16:30</span>&nbsp;
<a href="https://www.cnblogs.com/lm970585581/">H.U.C-王子</a>&nbsp;
阅读(<span id="post_view_count">21</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=13793407" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(13793407);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 346152, cb_blogApp = 'lm970585581', cb_blogUserGuid = 'cae64ea4-dd19-e711-845c-ac853d9f53ac';
    var cb_entryId = 13793407, cb_entryCreatedDate = '2020-10-10 16:30', cb_postType = 1;
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>
<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id='div-gpt-ad-1592365906576-0' style='width: 300px; height: 250px;'></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id='div-gpt-ad-1592366332455-0' style='width: 468px; height: 60px;'></div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverT2();
        deliverC1C2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

<div id="sidebar_ad"></div>
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 H.U.C-王子
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>
